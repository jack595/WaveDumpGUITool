# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WaveDump Tool.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import  QFileDialog
import os
import subprocess


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # Windows parameters variables
        self.v_name_ingredient_to_save = ["Box", "Text", "Checked"]
        self.v_method_ingredient_to_save = ["currentText", "text", "checkState"]
        self.v_set_method_ingredient_to_save = ["setCurrentText", "setText", "setChecked"]
        self.dir_parameters_window = {}
        self.dir_parameters_window_map_to_access_method = {}
        self.dir_parameters_window_map_to_set_method = {}

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1250, 753)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Title = QtWidgets.QTextBrowser(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(1010, 80, 241, 101))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 255, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 255, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.Title.setPalette(palette)
        self.Title.setObjectName("Title")
        self.OutputSettings = QtWidgets.QGroupBox(self.centralwidget)
        self.OutputSettings.setGeometry(QtCore.QRect(790, 270, 461, 271))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        self.OutputSettings.setFont(font)
        self.OutputSettings.setObjectName("OutputSettings")
        self.formLayoutWidget_4 = QtWidgets.QWidget(self.OutputSettings)
        self.formLayoutWidget_4.setGeometry(QtCore.QRect(10, 40, 381, 221))
        self.formLayoutWidget_4.setObjectName("formLayoutWidget_4")
        self.formLayout_4 = QtWidgets.QFormLayout(self.formLayoutWidget_4)
        self.formLayout_4.setContentsMargins(0, 0, 0, 0)
        self.formLayout_4.setObjectName("formLayout_4")
        self.ouptutFileFormatLabel = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.ouptutFileFormatLabel.setObjectName("ouptutFileFormatLabel")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.ouptutFileFormatLabel)
        self.OutputFileFormatBox = QtWidgets.QComboBox(self.formLayoutWidget_4)
        self.OutputFileFormatBox.setObjectName("OutputFileFormatBox")
        self.OutputFileFormatBox.addItem("")
        self.OutputFileFormatBox.addItem("")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.OutputFileFormatBox)
        self.DecimationFactor = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.DecimationFactor.setObjectName("DecimationFactor")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.DecimationFactor)
        self.DecimationFactorBox = QtWidgets.QComboBox(self.formLayoutWidget_4)
        self.DecimationFactorBox.setObjectName("DecimationFactorBox")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.DecimationFactorBox.addItem("")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.DecimationFactorBox)
        self.recordLengthText = QtWidgets.QLineEdit(self.formLayoutWidget_4)
        self.recordLengthText.setObjectName("recordLengthText")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.recordLengthText)
        self.recordLengthLabel = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.recordLengthLabel.setObjectName("recordLengthLabel")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.recordLengthLabel)
        self.ouputFileHeaderLabel = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.ouputFileHeaderLabel.setObjectName("ouputFileHeaderLabel")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.ouputFileHeaderLabel)
        self.OutputFileHeaderBox = QtWidgets.QComboBox(self.formLayoutWidget_4)
        self.OutputFileHeaderBox.setObjectName("OutputFileHeaderBox")
        self.OutputFileHeaderBox.addItem("")
        self.OutputFileHeaderBox.addItem("")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.OutputFileHeaderBox)
        self.TestPattern = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.TestPattern.setObjectName("TestPattern")
        self.formLayout_4.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.TestPattern)
        self.TestPatternBox = QtWidgets.QComboBox(self.formLayoutWidget_4)
        self.TestPatternBox.setObjectName("TestPatternBox")
        self.TestPatternBox.addItem("")
        self.TestPatternBox.addItem("")
        self.formLayout_4.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.TestPatternBox)
        self.ChannelsSettings = QtWidgets.QGroupBox(self.centralwidget)
        self.ChannelsSettings.setGeometry(QtCore.QRect(10, 270, 771, 271))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(22)
        self.ChannelsSettings.setFont(font)
        self.ChannelsSettings.setObjectName("ChannelsSettings")
        self.gridLayoutWidget = QtWidgets.QWidget(self.ChannelsSettings)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 40, 751, 231))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 0, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.CH3.setObjectName("CH3")
        self.gridLayout.addWidget(self.CH3, 4, 0, 1, 1)
        self.CH2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.CH2.setObjectName("CH2")
        self.gridLayout.addWidget(self.CH2, 3, 0, 1, 1)
        self.CH1 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.CH1.setObjectName("CH1")
        self.gridLayout.addWidget(self.CH1, 2, 0, 1, 1)
        self.CH0_AcquisitionChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH0_AcquisitionChecked.setStyleSheet("QRadioButton {\n"
"spacing: 5px;\n"
"}\n"
"QRadioButton::indicator {\n"
"width: 80px;\n"
"height: 80px;\n"
"}\n"
"QRadioButton::indicator:unchecked {\n"
"image: url(:/style/radioNcheck.png);\n"
"}")
        self.CH0_AcquisitionChecked.setText("")
        self.CH0_AcquisitionChecked.setObjectName("CH0_AcquisitionChecked")
        self.gridLayout.addWidget(self.CH0_AcquisitionChecked, 1, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 0, 1, 1)
        self.CH1_AcquisitionChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH1_AcquisitionChecked.setText("")
        self.CH1_AcquisitionChecked.setObjectName("CH1_AcquisitionChecked")
        self.gridLayout.addWidget(self.CH1_AcquisitionChecked, 2, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH3_AcquisitionChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH3_AcquisitionChecked.setText("")
        self.CH3_AcquisitionChecked.setObjectName("CH3_AcquisitionChecked")
        self.gridLayout.addWidget(self.CH3_AcquisitionChecked, 4, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH2_AcquisitionChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH2_AcquisitionChecked.setText("")
        self.CH2_AcquisitionChecked.setObjectName("CH2_AcquisitionChecked")
        self.gridLayout.addWidget(self.CH2_AcquisitionChecked, 3, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH0 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.CH0.setObjectName("CH0")
        self.gridLayout.addWidget(self.CH0, 1, 0, 1, 1)
        self.CH3_SelfTriggerChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH3_SelfTriggerChecked.setText("")
        self.CH3_SelfTriggerChecked.setObjectName("CH3_SelfTriggerChecked")
        self.gridLayout.addWidget(self.CH3_SelfTriggerChecked, 4, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH1_BaselineLevel = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.CH1_BaselineLevel.setObjectName("CH1_BaselineLevel")
        self.CH1_BaselineLevel.addItem("")
        self.CH1_BaselineLevel.addItem("")
        self.CH1_BaselineLevel.addItem("")
        self.CH1_BaselineLevel.addItem("")
        self.gridLayout.addWidget(self.CH1_BaselineLevel, 2, 3, 1, 1)
        self.CH2_BaselineLevel = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.CH2_BaselineLevel.setObjectName("CH2_BaselineLevel")
        self.CH2_BaselineLevel.addItem("")
        self.CH2_BaselineLevel.addItem("")
        self.CH2_BaselineLevel.addItem("")
        self.CH2_BaselineLevel.addItem("")
        self.gridLayout.addWidget(self.CH2_BaselineLevel, 3, 3, 1, 1)
        self.CH0_SelfTriggerChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH0_SelfTriggerChecked.setText("")
        self.CH0_SelfTriggerChecked.setObjectName("CH0_SelfTriggerChecked")
        self.gridLayout.addWidget(self.CH0_SelfTriggerChecked, 1, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH1_SelfTriggerChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH1_SelfTriggerChecked.setText("")
        self.CH1_SelfTriggerChecked.setObjectName("CH1_SelfTriggerChecked")
        self.gridLayout.addWidget(self.CH1_SelfTriggerChecked, 2, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH2_SelfTriggerChecked = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CH2_SelfTriggerChecked.setText("")
        self.CH2_SelfTriggerChecked.setObjectName("CH2_SelfTriggerChecked")
        self.gridLayout.addWidget(self.CH2_SelfTriggerChecked, 3, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH3_BaselineLevel = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.CH3_BaselineLevel.setObjectName("CH3_BaselineLevel")
        self.CH3_BaselineLevel.addItem("")
        self.CH3_BaselineLevel.addItem("")
        self.CH3_BaselineLevel.addItem("")
        self.CH3_BaselineLevel.addItem("")
        self.gridLayout.addWidget(self.CH3_BaselineLevel, 4, 3, 1, 1)
        self.SelfTrigger = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.SelfTrigger.setFont(font)
        self.SelfTrigger.setObjectName("SelfTrigger")
        self.gridLayout.addWidget(self.SelfTrigger, 0, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.BaselineLevel_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.BaselineLevel_2.setFont(font)
        self.BaselineLevel_2.setObjectName("BaselineLevel_2")
        self.gridLayout.addWidget(self.BaselineLevel_2, 0, 3, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH0_BaselineLevel = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.CH0_BaselineLevel.setObjectName("CH0_BaselineLevel")
        self.CH0_BaselineLevel.addItem("")
        self.CH0_BaselineLevel.addItem("")
        self.CH0_BaselineLevel.addItem("")
        self.CH0_BaselineLevel.addItem("")
        self.gridLayout.addWidget(self.CH0_BaselineLevel, 1, 3, 1, 1)
        self.CH2_ThresholdText = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.CH2_ThresholdText.setObjectName("CH2_ThresholdText")
        self.gridLayout.addWidget(self.CH2_ThresholdText, 3, 4, 1, 1)
        self.CH3_ThresholdText = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.CH3_ThresholdText.setObjectName("CH3_ThresholdText")
        self.gridLayout.addWidget(self.CH3_ThresholdText, 4, 4, 1, 1)
        self.CH0_ThresholdText = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.CH0_ThresholdText.setObjectName("CH0_ThresholdText")
        self.gridLayout.addWidget(self.CH0_ThresholdText, 1, 4, 1, 1)
        self.Threshold = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.Threshold.setFont(font)
        self.Threshold.setObjectName("Threshold")
        self.gridLayout.addWidget(self.Threshold, 0, 4, 1, 1, QtCore.Qt.AlignHCenter)
        self.CH1_ThresholdText = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.CH1_ThresholdText.setObjectName("CH1_ThresholdText")
        self.gridLayout.addWidget(self.CH1_ThresholdText, 2, 4, 1, 1)
        self.GlobalSettings = QtWidgets.QGroupBox(self.centralwidget)
        self.GlobalSettings.setGeometry(QtCore.QRect(30, 10, 971, 231))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(22)
        self.GlobalSettings.setFont(font)
        self.GlobalSettings.setObjectName("GlobalSettings")
        self.formLayoutWidget_2 = QtWidgets.QWidget(self.GlobalSettings)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(20, 40, 491, 181))
        self.formLayoutWidget_2.setObjectName("formLayoutWidget_2")
        self.formLayout_2 = QtWidgets.QFormLayout(self.formLayoutWidget_2)
        self.formLayout_2.setContentsMargins(0, 0, 0, 0)
        self.formLayout_2.setObjectName("formLayout_2")
        self.TriggerMode = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.TriggerMode.setObjectName("TriggerMode")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.TriggerMode)
        self.TriggerModeComboBox = QtWidgets.QComboBox(self.formLayoutWidget_2)
        self.TriggerModeComboBox.setObjectName("TriggerModeComboBox")
        self.TriggerModeComboBox.addItem("")
        self.TriggerModeComboBox.addItem("")
        self.TriggerModeComboBox.addItem("")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.TriggerModeComboBox)
        self.BaselineLevel = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.BaselineLevel.setObjectName("BaselineLevel")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.BaselineLevel)
        self.BaselineLevelBox = QtWidgets.QComboBox(self.formLayoutWidget_2)
        self.BaselineLevelBox.setObjectName("BaselineLevelBox")
        self.BaselineLevelBox.addItem("")
        self.BaselineLevelBox.addItem("")
        self.BaselineLevelBox.addItem("")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.BaselineLevelBox)
        self.TriggerThreshold = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.TriggerThreshold.setObjectName("TriggerThreshold")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.TriggerThreshold)
        self.TriggerThresholdText = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.TriggerThresholdText.setObjectName("TriggerThresholdText")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.TriggerThresholdText)
        self.PostTrigger = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.PostTrigger.setObjectName("PostTrigger")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.PostTrigger)
        self.PostTriggerText = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.PostTriggerText.setObjectName("PostTriggerText")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.PostTriggerText)
        self.formLayoutWidget_3 = QtWidgets.QWidget(self.GlobalSettings)
        self.formLayoutWidget_3.setGeometry(QtCore.QRect(540, 40, 401, 181))
        self.formLayoutWidget_3.setObjectName("formLayoutWidget_3")
        self.formLayout_3 = QtWidgets.QFormLayout(self.formLayoutWidget_3)
        self.formLayout_3.setContentsMargins(0, 0, 0, 0)
        self.formLayout_3.setObjectName("formLayout_3")
        self.PulsePolarity = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.PulsePolarity.setObjectName("PulsePolarity")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.PulsePolarity)
        self.PulsePolarityBox = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.PulsePolarityBox.setObjectName("PulsePolarityBox")
        self.PulsePolarityBox.addItem("")
        self.PulsePolarityBox.addItem("")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.PulsePolarityBox)
        self.IO_Level = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.IO_Level.setObjectName("IO_Level")
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.IO_Level)
        self.IO_LeveBox = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.IO_LeveBox.setObjectName("IO_LeveBox")
        self.IO_LeveBox.addItem("")
        self.IO_LeveBox.addItem("")
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.IO_LeveBox)
        self.TriggerOut = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.TriggerOut.setObjectName("TriggerOut")
        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.TriggerOut)
        self.TriggerOutBox = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.TriggerOutBox.setObjectName("TriggerOutBox")
        self.TriggerOutBox.addItem("")
        self.TriggerOutBox.addItem("")
        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.TriggerOutBox)
        self.GlobalThreshold = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.GlobalThreshold.setObjectName("GlobalThreshold")
        self.formLayout_3.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.GlobalThreshold)
        self.GlobalThresholdBox = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.GlobalThresholdBox.setObjectName("GlobalThresholdBox")
        self.GlobalThresholdBox.addItem("")
        self.GlobalThresholdBox.addItem("")
        self.formLayout_3.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.GlobalThresholdBox)
        self.RunWaveDumpPush = QtWidgets.QPushButton(self.centralwidget)
        self.RunWaveDumpPush.setGeometry(QtCore.QRect(820, 590, 271, 121))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        self.RunWaveDumpPush.setFont(font)
        self.RunWaveDumpPush.setObjectName("RunWaveDumpPush")
        self.SaveAsPush = QtWidgets.QPushButton(self.centralwidget)
        self.SaveAsPush.setGeometry(QtCore.QRect(140, 590, 271, 121))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        self.SaveAsPush.setFont(font)
        self.SaveAsPush.setObjectName("SaveAsPush")
        self.SaveAsPush.clicked.connect(self.GetWindowParameters)
        self.SaveAsPush.clicked.connect(self.file_save)


        self.LoadConfigurePush = QtWidgets.QPushButton(self.centralwidget)
        self.LoadConfigurePush.setGeometry(QtCore.QRect(480, 590, 271, 121))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        self.LoadConfigurePush.setFont(font)
        self.LoadConfigurePush.setObjectName("LoadConfigurePush")
        self.LoadConfigurePush.clicked.connect(self.file_load)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1250, 23))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.menufile.addAction(self.actionOpen)
        self.menufile.addAction(self.actionSave)
        self.menubar.addAction(self.menufile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:24pt; font-weight:600;\">WaveDump Tool</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Author: Xiaojie Luo</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Email: luoxj@ihep.ac.cn</span></p></body></html>"))
        self.OutputSettings.setTitle(_translate("MainWindow", "Output Settings"))
        self.ouptutFileFormatLabel.setText(_translate("MainWindow", "Ouptut File Format:"))
        self.OutputFileFormatBox.setItemText(0, _translate("MainWindow", "BINARY"))
        self.OutputFileFormatBox.setItemText(1, _translate("MainWindow", "ASCII"))
        self.DecimationFactor.setText(_translate("MainWindow", "Decimation Factor:"))
        self.DecimationFactorBox.setItemText(0, _translate("MainWindow", "1"))
        self.DecimationFactorBox.setItemText(1, _translate("MainWindow", "2"))
        self.DecimationFactorBox.setItemText(2, _translate("MainWindow", "4"))
        self.DecimationFactorBox.setItemText(3, _translate("MainWindow", "8"))
        self.DecimationFactorBox.setItemText(4, _translate("MainWindow", "16"))
        self.DecimationFactorBox.setItemText(5, _translate("MainWindow", "32"))
        self.DecimationFactorBox.setItemText(6, _translate("MainWindow", "64"))
        self.DecimationFactorBox.setItemText(7, _translate("MainWindow", "128"))
        self.recordLengthText.setText(_translate("MainWindow", "1024"))
        self.recordLengthLabel.setText(_translate("MainWindow", "Record Length:"))
        self.ouputFileHeaderLabel.setText(_translate("MainWindow", "Ouput File Header:"))
        self.OutputFileHeaderBox.setItemText(0, _translate("MainWindow", "YES"))
        self.OutputFileHeaderBox.setItemText(1, _translate("MainWindow", "NO"))
        self.TestPattern.setText(_translate("MainWindow", "Test Pattern:"))
        self.TestPatternBox.setItemText(0, _translate("MainWindow", "NO"))
        self.TestPatternBox.setItemText(1, _translate("MainWindow", "YES"))
        self.ChannelsSettings.setTitle(_translate("MainWindow", "Channels Settings"))
        self.label_7.setText(_translate("MainWindow", "Acquisition"))
        self.CH3.setText(_translate("MainWindow", "CH3"))
        self.CH2.setText(_translate("MainWindow", "CH2"))
        self.CH1.setText(_translate("MainWindow", "CH1"))
        self.CH0.setText(_translate("MainWindow", "CH0"))
        self.CH1_BaselineLevel.setItemText(0, _translate("MainWindow", "50"))
        self.CH1_BaselineLevel.setItemText(1, _translate("MainWindow", "0"))
        self.CH1_BaselineLevel.setItemText(2, _translate("MainWindow", "100"))
        self.CH1_BaselineLevel.setItemText(3, _translate("MainWindow", "global"))
        self.CH2_BaselineLevel.setItemText(0, _translate("MainWindow", "50"))
        self.CH2_BaselineLevel.setItemText(1, _translate("MainWindow", "0"))
        self.CH2_BaselineLevel.setItemText(2, _translate("MainWindow", "100"))
        self.CH2_BaselineLevel.setItemText(3, _translate("MainWindow", "global"))
        self.CH3_BaselineLevel.setItemText(0, _translate("MainWindow", "50"))
        self.CH3_BaselineLevel.setItemText(1, _translate("MainWindow", "0"))
        self.CH3_BaselineLevel.setItemText(2, _translate("MainWindow", "100"))
        self.CH3_BaselineLevel.setItemText(3, _translate("MainWindow", "global"))
        self.SelfTrigger.setText(_translate("MainWindow", "Self-Trigger"))
        self.BaselineLevel_2.setText(_translate("MainWindow", "Baseline-Level"))
        self.CH0_BaselineLevel.setItemText(0, _translate("MainWindow", "50"))
        self.CH0_BaselineLevel.setItemText(1, _translate("MainWindow", "0"))
        self.CH0_BaselineLevel.setItemText(2, _translate("MainWindow", "100"))
        self.CH0_BaselineLevel.setItemText(3, _translate("MainWindow", "global"))
        self.Threshold.setText(_translate("MainWindow", "Threshold"))
        self.GlobalSettings.setTitle(_translate("MainWindow", "Global Settings"))
        self.TriggerMode.setText(_translate("MainWindow", "Trigger Mode:"))
        self.TriggerModeComboBox.setItemText(0, _translate("MainWindow", "Only Self-Trigger"))
        self.TriggerModeComboBox.setItemText(1, _translate("MainWindow", "Only External-Trigger"))
        self.TriggerModeComboBox.setItemText(2, _translate("MainWindow", "Self-Trigger + External-Trigger"))
        self.BaselineLevel.setText(_translate("MainWindow", "Baseline-Level: "))
        self.BaselineLevelBox.setItemText(0, _translate("MainWindow", "50"))
        self.BaselineLevelBox.setItemText(1, _translate("MainWindow", "0"))
        self.BaselineLevelBox.setItemText(2, _translate("MainWindow", "100"))
        self.TriggerThreshold.setText(_translate("MainWindow", "Trigger-Threshold:"))
        self.TriggerThresholdText.setText(_translate("MainWindow", "10"))
        self.PostTrigger.setText(_translate("MainWindow", "Post Trigger:"))
        self.PostTriggerText.setText(_translate("MainWindow", "50"))
        self.PulsePolarity.setText(_translate("MainWindow", "Pulse Polarity:"))
        self.PulsePolarityBox.setItemText(0, _translate("MainWindow", "NEGATIVE"))
        self.PulsePolarityBox.setItemText(1, _translate("MainWindow", "POSITIVE"))
        self.IO_Level.setText(_translate("MainWindow", "FPIO_LEVEL:"))
        self.IO_LeveBox.setItemText(0, _translate("MainWindow", "TTL"))
        self.IO_LeveBox.setItemText(1, _translate("MainWindow", "NIM"))
        self.TriggerOut.setText(_translate("MainWindow", "Trigger-Out:"))
        self.TriggerOutBox.setItemText(0, _translate("MainWindow", "NO"))
        self.TriggerOutBox.setItemText(1, _translate("MainWindow", "YES"))
        self.GlobalThreshold.setText(_translate("MainWindow", "Global Threshold:"))
        self.GlobalThresholdBox.setItemText(0, _translate("MainWindow", "NO"))
        self.GlobalThresholdBox.setItemText(1, _translate("MainWindow", "YES"))
        self.RunWaveDumpPush.setText(_translate("MainWindow", "RUN\n"
" WaveDump"))
        self.RunWaveDumpPush.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.SaveAsPush.setText(_translate("MainWindow", "Save\n"
" As"))
        self.SaveAsPush.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.LoadConfigurePush.setText(_translate("MainWindow", "Load\n"
" Configure"))
        self.LoadConfigurePush.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.menufile.setTitle(_translate("MainWindow", "file"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))

        if not self.dir_parameters_window:
            for name_member in dir(self):
                for ingredient,access_method,set_method in zip( self.v_name_ingredient_to_save,self.v_method_ingredient_to_save,
                                              self.v_set_method_ingredient_to_save):
                    if ingredient in name_member:
                        self.dir_parameters_window[name_member] = None
                        self.dir_parameters_window_map_to_access_method[name_member] = access_method
                        self.dir_parameters_window_map_to_set_method[name_member] = set_method

        self.RunWaveDumpPush.clicked.connect(self.GetWindowParameters)
        self.RunWaveDumpPush.clicked.connect(self.RunWaveDumpFunc)

    def GetWindowParameters(self):
        for name_member,method in self.dir_parameters_window_map_to_access_method.items():
            var = getattr(self, name_member)
            class_method = getattr(var, method)
            self.dir_parameters_window[name_member] = class_method()

    def SetWindowByParametersDict(self):
        for name_member, set_method in self.dir_parameters_window_map_to_set_method.items():
            var = getattr(self, name_member)
            class_method = getattr(var, set_method)
            class_method(self.dir_parameters_window[name_member])



    def SetTriggerOptionInFile(self):
        self.externalTriggerInFile = ""
        self.selfTriggerInFile = ""
        if "External-Trigger" in self.TriggerModeComboBox.currentText():
            if self.TriggerOutBox.currentText()=="NO":
                self.externalTriggerInFile = "ACQUISITION_ONLY"
            elif self.TriggerOutBox.currentText() == "YES":
                self.externalTriggerInFile = "ACQUISITION_AND_TRGOUT"
            else:
                print("Abnormal State in self.TriggerOut:\t", self.TriggerOutBox.currentText())
                exit()
        else:
            self.externalTriggerInFile = "DISABLED"


        if "Self-Trigger" in self.TriggerModeComboBox.currentText():
            if self.TriggerOutBox.currentText()=="NO":
                self.selfTriggerInFile = "ACQUISITION_ONLY"
            elif self.TriggerOutBox.currentText()=="YES":
                self.selfTriggerInFile = "ACQUISITION_AND_TRGOUT"
            else:
                print("Abnormal State in self.TriggerOut:\t", self.TriggerOutBox.currentText())
                exit()
        else:
            self.selfTriggerInFile = "DISABLED"

        if self.CH0_SelfTriggerChecked.checkState()==0 and \
            self.CH1_SelfTriggerChecked.checkState()==0 and \
            self.CH2_SelfTriggerChecked.checkState() == 0 and \
            self.CH1_SelfTriggerChecked.checkState() == 0:
            self.selfTriggerInFile = "DISABLED"

    def RunWaveDumpFunc(self):
        self.SetTriggerOptionInFile()
        self.SetSingleChannel(0)

        with open("WaveDumpConfig.txt", "w") as f:
            f.write(template_configure.format(RecordLength=self.recordLengthText.text(),
                                  DecimationFactor=self.DecimationFactorBox.currentText(),
                                  PostTrigger=self.PostTriggerText.text(),
                                  PulsePolarity=self.PulsePolarityBox.currentText(),
                                  ExternalTrigger=self.externalTriggerInFile,
                                  Channel_Trigger=self.selfTriggerInFile,
                                  FPIO_Level=self.IO_LeveBox.currentText(),
                                  OutputFileFormat=self.OutputFileFormatBox.currentText(),
                                  OuputFileHeader=self.OutputFileHeaderBox.currentText(),
                                  TestPattern=self.TestPatternBox.currentText(),
                                  GlobalBaselineLevel=self.BaselineLevelBox.currentText(),
                                  GlobalThreshold=self.TriggerThresholdText.text(),
                                  CH0_Settings=self.SetSingleChannel(0),
                                  CH1_Settings=self.SetSingleChannel(1),
                                  CH2_Settings=self.SetSingleChannel(2),
                                  CH3_Settings=self.SetSingleChannel(3) ) )
        # os.chdir('')
        subprocess.Popen("WaveDump.exe")

    def file_save(self):
        # option = QFileDialog.options()
        file = QFileDialog.getSaveFileName(None,
                                           "Save File",
                                           "default.npz",
                                           "All Files (*)")
        np.savez(file[0], dir_pars=self.dir_parameters_window, dir_pars_method=self.dir_parameters_window_map_to_access_method)

    def file_load(self):
        # option = QFileDialog.options()
        file = QFileDialog.getOpenFileName(None,
                                           "Load File",
                                           "default.npz",
                                           "All Files (*)")
        with np.load(file[0], allow_pickle=True) as f:
            self.dir_parameters_window = f["dir_pars"].item()
            self.dir_parameters_window_map_to_access_method = f["dir_pars_method"].item()

        self.SetWindowByParametersDict()


    def SetSingleChannel(self, i_channel:int):
        channel_settings = ""

        # Whether turn on acquisition box
        if getattr( self, f"CH{i_channel}_AcquisitionChecked").checkState()==2:
            channel_settings += "ENABLE_INPUT\tYES\n"
        elif getattr( self, f"CH{i_channel}_AcquisitionChecked").checkState()==0:
            channel_settings += "ENABLE_INPUT\tNO\n"
        else:
            print(f"Abnormal State in CH{i_channel} AcquisitionBox:\t"+\
                  getattr( self, f"CH{i_channel}_AcquisitionChecked").checkState())
            exit(0)

        # Baseline Level
        if getattr( self, f'CH{i_channel}_BaselineLevel' ).currentText()!="global":
            channel_settings += f"BASELINE_LEVEL\t{getattr( self, f'CH{i_channel}_BaselineLevel' ).currentText()}\n"

        # Self-Trigger Threshold Settings
        if getattr( self, f"CH{i_channel}_SelfTriggerChecked").checkState()==2:
            if getattr( self, f'CH{i_channel}_ThresholdText' ).text().isnumeric():
                channel_settings += "TRIGGER_THRESHOLD\t"+getattr( self, f'CH{i_channel}_ThresholdText' ).text()+"\n"
            else:
                print("Input Channel Threshold is NULL, use the global self-trigger threshold")
        elif getattr( self, f"CH{i_channel}_SelfTriggerChecked").checkState()==0:
            pass
        else:
            print(f"Abnormal State in CH{i_channel}_SelfTriggerChecked:\t"+\
                  getattr( self, f"CH{i_channel}_SelfTriggerChecked").checkState())
            exit(0)
        return channel_settings


if __name__ == "__main__":
    import sys
    with open("ConfigureFileTemplate.txt", "r") as f:
        template_configure = f.read()

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
